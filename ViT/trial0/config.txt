RN_transform = transforms.Compose([
    # Resize the image to (224, 224) and convert to RGB
    transforms.Resize((384, 384)),
    transforms.Grayscale(num_output_channels=3),  # Convert single-channel image to RGB
    # Random horizontal flip with probability 0.5
    transforms.RandomHorizontalFlip(p=0.5),
    # Random rotation between -10 and 10 degrees
    transforms.RandomRotation(degrees=(-10, 10)),
    # Random brightness adjustment
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),
    # Convert PIL image to tensor and normalize
    transforms.ToTensor(),
    # Normalize with mean and standard deviation of ImageNet dataset
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# NaiveCNN params
criterion = nn.CrossEntropyLoss(weight=class_weights)
optimizer = optim.SGD(model.parameters(), lr=4e-4, weight_decay=1e-5)
scheduler = lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.2)